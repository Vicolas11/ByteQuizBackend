generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator joi {
  provider = "prisma-joi-generator"
  output   = "./joi"
}

generator erd {
  provider = "prisma-erd-generator"
}

enum Role {
  admin
  user
}

enum Gender {
  Male
  Female
}

model Achievement {
  id        String   @id @default(uuid())
  title     String
  medalImg  String
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
  createdAt DateTime @default(now())
}

model Option {
  id         String    @id @default(uuid())
  value      String
  label      String
  isCorrect  Boolean
  isSelected Boolean   @default(false)
  Question   Question? @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String?
}

model Question {
  id            String       @id @default(uuid())
  question      String
  options       Option[]
  score         Int          @default(5)
  time          Int          @default(30)
  point         Int          @default(0)
  isAnswered    Boolean      @default(false)
  isCompleted   Boolean      @default(false)
  Competition   Competition? @relation(fields: [competitionId], references: [id], onDelete: Cascade)
  competitionId String?
  Quiz          Quiz?        @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId        String?
  createdAt     DateTime     @default(now())
  user          User?        @relation(fields: [userId], references: [id])
  userId        String?
}

model Quiz {
  id           String     @id @default(uuid())
  questions    Question[]
  totalPoint   Int        @default(0)
  overallPoint Int        @default(0)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  userId       String
  hasSubmitted Boolean    @default(false)
}

model Competition {
  id            String              @id @default(uuid())
  title         String
  subtitle      String
  imgCover      String
  price         Int
  overallPoint  Int                 @default(0)
  createdAt     DateTime            @default(now())
  hasStarted    Boolean             @default(false)
  createdUserId String
  questions     Question[]
  createdBy     User                @relation("createdBy", fields: [createdUserId], references: [id], onDelete: Cascade)
  joinedUsers   CompetitionToUser[]
}

model User {
  id                  String              @id @default(uuid())
  email               String              @unique
  username            String              @unique
  password            String
  avatar              String?
  gender              Gender
  isFirstTime         Boolean             @default(true)
  createAt            DateTime            @default(now())
  highScore           Int                 @default(0)
  role                Role                @default(user)
  Quiz                Quiz[]
  achievement         Achievement[]
  createdCompetitions Competition[]       @relation("createdBy")
  joinedCompetitions  CompetitionToUser[]
  LogoutToken         LogoutToken[]
  Question            Question[]
}

model CompetitionToUser {
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  competition   Competition @relation(fields: [competitionId], references: [id], onDelete: Cascade)
  userId        String
  competitionId String
  joinedDate    DateTime    @default(now())
  hasJoined     Boolean     @default(false)
  hasSubmitted  Boolean     @default(false)
  totalPoint    Int         @default(0)

  @@id([userId, competitionId])
}

model LogoutToken {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  token  String @unique @db.VarChar(1024)
}
